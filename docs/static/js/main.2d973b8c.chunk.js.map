{"version":3,"sources":["serviceWorker.js","components/AddCategory.js","helpers/getGifts.js","components/GifGridItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","components/GiftExpertApp.js","index.js"],"names":["Boolean","window","location","hostname","match","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","cats","type","value","onChange","target","getGifts","category","a","fetch","encodeURI","response","json","data","gifts","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GiftGrid","loading","state","setState","useEffect","then","imgs","UseFetchGifs","image","key","GiftExpertApp","categories","i","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCoBSC,EAnCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAkBrC,OACI,oCACI,0BAAMC,SAZO,SAACC,GAClBA,EAAEC,iBACwB,KAAtBJ,EAAWK,SACXP,GAAc,SAAAQ,GAAI,MAAI,CAACN,MACvBC,EAAc,OASV,2BACIM,KAAK,OACLC,MAAOR,EACPS,SApBK,SAACN,GAClBF,EAAcE,EAAEO,OAAOF,a,uBCRlBG,EAAQ,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,4DACR,wCACG,mCAFK,SAGGC,MAFX,wCAEoB,YAAQC,UAAUH,GAAlB,6BADjB,qCAFK,cAGdI,EAHc,gBAICA,EAASC,OAJV,uBAIbC,EAJa,EAIbA,KAEDC,EAAQD,EAAKE,KAAI,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAKH,EAAII,OAAOC,iBAAiBF,QAVrB,kBAcbL,GAda,4CAAH,sDCWNQ,EATK,SAAC,GAAW,IAAVN,EAAS,EAATA,IAClB,OACI,yBAAKO,UAAU,gDACX,yBAAKC,IAAKR,EAAIG,IAAKM,IAAKT,EAAIE,QAC5B,2BAAIF,EAAIE,SCeLQ,EAjBE,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDL,SAACA,GAAc,IAAD,EACZb,mBAAS,CAC/BmB,KAAM,GACNc,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAoBtC,OAdAC,qBAAU,WACNxB,EAASC,GAAUwB,MAAK,SAAAC,GAAI,OAIxBH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAKlB,CAACpB,IAEGqB,EDjBiBK,CAAa1B,GAA9BM,EAFsB,EAEtBA,KAAMc,EAFgB,EAEhBA,QAEb,OACI,oCACI,4BAAKpB,GACJoB,GAAW,0CACZ,yBAAKJ,UAAW,YACXV,EAAKE,KAAI,SAACmB,GAAD,OACN,kBAAC,EAAD,CAAaC,IAAKD,EAAMjB,GAAID,IAAKkB,UEUtCE,EApBO,WAAM,MAGY1C,mBAAS,CAAC,UAHtB,mBAGjB2C,EAHiB,KAGL5C,EAHK,KAMxB,OACI,oCACI,+CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEC4C,EAAWtB,KAAI,SAACR,EAAU+B,GAAX,OACZ,kBAAC,EAAD,CAAUH,IAAKG,EAAG/B,SAAUA,SCV5CgC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2d973b8c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (inputValue.trim() !== '') {\r\n            setCategories(cats => [inputValue]);\r\n            setInputValue('');\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleChange}\r\n                />\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories:PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AddCategory;\r\n","export const getGifts = async (category) => {\r\n    const url = 'https://api.giphy.com/v1/gifs/search?'\r\n    const apiKey = '5XpvRVGfKQ3ecMi7jMtUVfDEf4NoJBea'\r\n    const response = await fetch(url + `q=${encodeURI(category)}&limit=20&api_key=${apiKey}`)\r\n    const {data} = await response.json()\r\n\r\n    const gifts = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifts;\r\n}\r\n","import React from 'react';\r\n\r\nconst GifGridItem = ({img}) => {\r\n    return (\r\n        <div className='card animate__animated animate__bounceInLeft'>\r\n            <img src={img.url} alt={img.title} />\r\n            <p>{img.title}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from 'react';\r\nimport {UseFetchGifs} from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst GiftGrid = ({category}) => {\r\n\r\n    const {data, loading} = UseFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p>Cargando...</p>}\r\n            <div className={'cardGrid'}>\r\n                {data.map((image) => (\r\n                    <GifGridItem key={image.id} img={image}/>\r\n                ))}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GiftGrid;\r\n","import {useEffect, useState} from \"react\";\r\nimport {getGifts} from \"../helpers/getGifts\";\r\n\r\nexport const UseFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifts(category).then(imgs => (\r\n\r\n\r\n            // console.log(imgs)\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n\r\n\r\n        ))\r\n    }, [category])\r\n\r\n    return state;\r\n};\r\n","import React, {useState} from 'react';\r\nimport AddCategory from \"./AddCategory\";\r\nimport GiftGrid from \"./GiftGrid\";\r\n\r\nconst GiftExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['Money'])\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>Gift Expert App</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            {categories.map((category, i) => (\r\n                <GiftGrid key={i} category={category}/>\r\n            ))}\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GiftExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport GiftExpertApp from \"./components/GiftExpertApp\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <GiftExpertApp/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}